# -*- coding: utf-8 -*-
"""Assignment 5 - 2D Arrays (Deadline: 04 June 2023).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ts7mpJds8Rcy3Um9_ew0vr7ot9IXgdq4
"""



"""<aside>
ðŸ’¡ **Question 1**

Convert 1D Array Into 2D Array

You are given a **0-indexed** 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with Â m rows and n columns using **all** the elements from original.

The elements from indices 0 to n - 1 (**inclusive**) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (**inclusive**) should form the second row of the constructed 2D array, and so on.

Return *an* m x n *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.

**Example 1:**
**Input:** original = [1,2,3,4], m = 2, n = 2

**Output:** [[1,2],[3,4]]

**Explanation:** The constructed 2D array should contain 2 rows and 2 columns.

The first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.

The second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.

</aside>
"""

import numpy as np
original = [1,2,3,4]
m=2
n=2
array=np.array(original).reshape(m,n)
print(array)

"""<aside>
ðŸ’¡ **Question 2**

You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**

</aside>
"""

def arrangecoins(n:int)->int:
  left=0
  right=n
  while left<=right:
    mid=left+(right-left)//2
    curr=mid*(mid+1)//2
    if curr==n:
      return mid
    elif curr>n:
      right=mid-1
    elif curr<n:
      left=mid+1
  return right
result=arrangecoins(5)
print(result)



"""<aside>
ðŸ’¡ **Question 3**

Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

**Input:** nums = [-4,-1,0,3,10]

**Output:** [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].

After sorting, it becomes [0,1,9,16,100].

</aside>
"""

from pathlib import PureWindowsPath
nums= [-4,-1,0,3,10]
squares_of_each_number=[i*i for i in nums]
print(sorted(squares_of_each_number))



"""<aside>
ðŸ’¡ **Question 4**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

</aside>
"""

def distinct_array(nums1,nums2):
  Output=[[],[]]
  for num in nums1:
    if num not in nums2 and num not in Output[0]:
      Output[0].append(num)
  for num in nums2:
    if num not in nums1 and num not in Output[1]:
      Output[1].append(num)

  return Output

nums1 = [1,2,3]
 nums2 = [2,4,6]
 result=distinct_array(nums1,nums2)
 print(result)



"""<aside>
ðŸ’¡ **Question 5**

Given two integer arrays arr1 and arr2, and the integer d, *return the distance value between the two arrays*.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

**Example 1:**

**Input:** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2

**Output:** 2

**Explanation:**

For arr1[0]=4 we have:

|4-10|=6 > d=2

|4-9|=5 > d=2

|4-1|=3 > d=2

|4-8|=4 > d=2

For arr1[1]=5 we have:

|5-10|=5 > d=2

|5-9|=4 > d=2

|5-1|=4 > d=2

|5-8|=3 > d=2

For arr1[2]=8 we have:

**|8-10|=2 <= d=2**

**|8-9|=1 <= d=2**

|8-1|=7 > d=2

**|8-8|=0 <= d=2**

</aside>
"""

arr1 = [4,5,8]
arr2 = [10,9,1,8]
d = 2

distance_value=0
for i in range(len(arr1)):
    found_match = False
    for j in range(len(arr2)):
        if abs(arr1[i] - arr2[j]) <= d:
            found_match = True
            break

    if not found_match:
        distance_value += 1

print(distance_value)



"""<aside>
ðŸ’¡ **Question 6**

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears **once** or **twice**, return *an array of all the integers that appears **twice***.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

**Example 1:**

**Input:** nums = [4,3,2,7,8,2,3,1]

**Output:**

[2,3]

</aside>
"""

def once_twice(nums):
  seen=set()
  duplicate=[] ##add duplicates in an list
  for num in nums:
    if num in seen:
      duplicate.append(num)
    else:
      seen.add(num)
  return list(duplicate)

nums=[4,3,2,7,8,2,3,1]
result=once_twice(nums)
print(result)

"""<aside>
ðŸ’¡ **Question 7**

Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in O(log n) time.

**Example 1:**

**Input:** nums = [3,4,5,1,2]

**Output:** 1

**Explanation:**

The original array was [1,2,3,4,5] rotated 3 times.

</aside>
"""







"""<aside>
ðŸ’¡ **Question 8**

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

</aside>
"""

changed = [1, 3, 4, 2, 6, 8]
original =[]

for num in changed:
  if num==2:
    continue
  elif num % 2 == 0:
      original.append(num // 2)
  else:
      original.append(num)

original = list(set(original))
original.sort()  # Remove duplicates from the original list

print(original)